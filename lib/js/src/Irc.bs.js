// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Net = require("net");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

var requestedDisconnect = {
  contents: false
};

var Conn = {
  requestedDisconnect: requestedDisconnect
};

var nick = {
  contents: ""
};

var hostMask = {
  contents: ""
};

var maxLineLength = {
  contents: 0
};

function updateMaxLineLength(param) {
  maxLineLength.contents = (497 - nick.contents.length | 0) - hostMask.contents.length | 0;
  
}

function newClient(server, portOpt, password, nickname) {
  var port = portOpt !== undefined ? portOpt : 6667;
  return {
          server: server,
          port: port,
          nickname: nickname,
          password: password !== undefined ? password : "",
          username: "Rescript IRC Bot",
          realname: "Rescript IRC Bot",
          nickPass: "",
          usermode: "+RB -x",
          channels: [],
          ping: 180,
          pingTimeout: 20
        };
}

function send(conn, command) {
  var args = command.slice();
  var patternA = /\s/;
  var patternB = /^:/;
  var len = args.length;
  if (Belt_Option.isSome(Caml_option.null_to_opt(Caml_array.get(args, len - 1 | 0).match(patternA))) === true || Belt_Option.isSome(Caml_option.null_to_opt(Caml_array.get(args, len - 1 | 0).match(patternB))) === true || Caml_array.get(args, len - 1 | 0) === "") {
    Caml_array.set(args, len - 1 | 0, ":" + Caml_array.get(args, len - 1 | 0));
  }
  if (requestedDisconnect.contents === false) {
    conn.write(args.join(" ") + "\r\n");
    return ;
  }
  
}

function connectListener(conn, opt) {
  send(conn, [
        "NICK",
        opt.nickname
      ]);
  nick.contents = opt.nickname;
  updateMaxLineLength(undefined);
  return send(conn, [
              "USER",
              opt.username,
              String(8),
              "*",
              opt.realname
            ]);
}

function connect(opt, retry) {
  var conn = Net.createConnection(opt.port, opt.server);
  conn.setTimeout(0);
  conn.setEncoding("utf8");
  
}

function disconnect(conn, msg) {
  if (conn.readyState === "open") {
    send(conn, [
          "QUIT",
          msg
        ]);
  }
  requestedDisconnect.contents = true;
  conn.end();
  
}

function end(conn) {
  conn.destroy();
  
}

function join(conn, opt, channel) {
  var channels = " ".split(channel);
  Belt_Array.map(channels, (function (x) {
          send(conn, [
                "JOIN",
                x
              ]);
          if (opt.channels.indexOf(x) === -1) {
            opt.channels.push(x);
            return ;
          }
          
        }));
  
}

function part(conn, opt, channel, msg, param) {
  if (msg !== undefined) {
    send(conn, [
          "PART",
          channel,
          msg
        ]);
  } else {
    send(conn, [
          "PART",
          channel
        ]);
  }
  if (opt.channels.indexOf(channel) !== -1) {
    opt.channels.splice(opt.channels.indexOf(channel), 1);
    return ;
  }
  
}

function whois(conn, nickname) {
  return send(conn, [
              "WHOIS",
              nickname
            ]);
}

var Client = {
  nick: nick,
  hostMask: hostMask,
  maxLineLength: maxLineLength,
  updateMaxLineLength: updateMaxLineLength,
  newClient: newClient,
  send: send,
  connectListener: connectListener,
  connect: connect,
  disconnect: disconnect,
  end: end,
  join: join,
  part: part,
  whois: whois
};

exports.Conn = Conn;
exports.Client = Client;
/* net Not a pure module */
